$date
	Wed Dec 28 23:27:32 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var wire 256 ! mem_cpu_data [255:0] $end
$var wire 1 " mem_cpu_ack $end
$var wire 1 # cpu_mem_write $end
$var wire 1 $ cpu_mem_enable $end
$var wire 256 % cpu_mem_data [255:0] $end
$var wire 32 & cpu_mem_addr [31:0] $end
$var reg 1 ' Clk $end
$var reg 1 ( Reset $end
$var reg 1 ) Start $end
$var reg 27 * address [26:0] $end
$var reg 1 + flag $end
$var reg 5 , index [4:0] $end
$var reg 24 - tag [23:0] $end
$var integer 32 . counter [31:0] $end
$var integer 32 / i [31:0] $end
$var integer 32 0 outfile [31:0] $end
$var integer 32 1 outfile2 [31:0] $end
$scope module CPU $end
$var wire 1 2 branch_flag $end
$var wire 1 ' clk_i $end
$var wire 1 3 flush $end
$var wire 1 ( rst_i $end
$var wire 1 ) start_i $end
$var wire 1 4 stall $end
$var wire 32 5 mux7Write [31:0] $end
$var wire 32 6 mux6ALU [31:0] $end
$var wire 32 7 mux4ALU [31:0] $end
$var wire 5 8 mux3EXMEM [4:0] $end
$var wire 32 9 mux1Out [31:0] $end
$var wire 32 : mpc2 [31:0] $end
$var wire 1 # mem_write_o $end
$var wire 1 $ mem_enable_o $end
$var wire 256 ; mem_data_o [255:0] $end
$var wire 256 < mem_data_i [255:0] $end
$var wire 32 = mem_addr_o [31:0] $end
$var wire 1 " mem_ack_i $end
$var wire 1 > memWrite $end
$var wire 1 ? memRead $end
$var wire 1 @ jump_flag $end
$var wire 32 A inst_addr [31:0] $end
$var wire 32 B inst [31:0] $end
$var wire 32 C extended [31:0] $end
$var wire 8 D cm8 [7:0] $end
$var wire 1 E branch_flagT $end
$var wire 32 F am1 [31:0] $end
$var wire 5 G WB_mux3 [4:0] $end
$var wire 2 H WB_memState [1:0] $end
$var wire 2 I WB_WBState [1:0] $end
$var wire 1 J PCWrite $end
$var wire 32 K MUX_7Out [31:0] $end
$var wire 32 L MUX_5Out [31:0] $end
$var wire 8 M MUX8_data [7:0] $end
$var wire 5 N MEM_mux3 [4:0] $end
$var wire 32 O MEM_ALUOut [31:0] $end
$var wire 32 P JUMP_Addr [31:0] $end
$var wire 32 Q IF_inst [31:0] $end
$var wire 1 R IFIDWrite $end
$var wire 5 S IERt [4:0] $end
$var wire 5 T IERs [4:0] $end
$var wire 32 U ID_rt [31:0] $end
$var wire 32 V ID_rs [31:0] $end
$var wire 32 W ID_addr [31:0] $end
$var wire 1 X HazardMUX_8 $end
$var wire 1 Y Eq_flag $end
$var wire 32 Z EX_extend [31:0] $end
$var wire 2 [ EX_WB [1:0] $end
$var wire 5 \ EX_Rt [4:0] $end
$var wire 2 ] EX_M [1:0] $end
$var wire 32 ^ Add_pc_o [31:0] $end
$var wire 32 _ ALUresult [31:0] $end
$scope module ADD $end
$var wire 32 ` data_o [31:0] $end
$var wire 32 a data2_in [31:0] $end
$var wire 32 b data1_in [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 32 c data_o [31:0] $end
$var wire 32 d data2_i [31:0] $end
$var wire 32 e data1_i [31:0] $end
$var wire 3 f ALUCtrl_i [2:0] $end
$var reg 32 g result_temp [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 3 h ALUCtrl_o [2:0] $end
$var wire 6 i funct_i [5:0] $end
$var wire 2 j ALUOp_i [1:0] $end
$var reg 3 k aluCtrl_temp [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 l data2_in [31:0] $end
$var wire 32 m data_o [31:0] $end
$var wire 32 n data1_in [31:0] $end
$upscope $end
$scope module Control $end
$var wire 32 o data_in [31:0] $end
$var reg 1 E branch $end
$var reg 8 p data_out [7:0] $end
$var reg 1 @ jump $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 q ALUOut_i [31:0] $end
$var wire 1 ' clk_i $end
$var wire 1 4 stall_i $end
$var wire 32 r mux7_i [31:0] $end
$var wire 5 s mux3_i [4:0] $end
$var wire 2 t WB_i [1:0] $end
$var wire 2 u MEM_i [1:0] $end
$var reg 32 v ALUOut_o [31:0] $end
$var reg 1 ? MemRead_o $end
$var reg 1 > MemWrite_o $end
$var reg 2 w WB_o [1:0] $end
$var reg 5 x mux3_o [4:0] $end
$var reg 32 y mux7_o [31:0] $end
$upscope $end
$scope module ForwardingUnit $end
$var wire 5 z EX_MEM_RegRd_i [4:0] $end
$var wire 1 { EX_MEM_regWrite_i $end
$var wire 2 | ForwardA_o [1:0] $end
$var wire 2 } ForwardB_o [1:0] $end
$var wire 1 ~ MEM_WB_regWrite_i $end
$var wire 5 !" MEM_WB_RegRd_i [4:0] $end
$var wire 5 "" ID_EX_RegRt [4:0] $end
$var wire 5 #" ID_EX_RegRs [4:0] $end
$var reg 2 $" fa_temp [1:0] $end
$var reg 2 %" fb_temp [1:0] $end
$upscope $end
$scope module HazardDetection $end
$var wire 1 &" IDEX_MemRead_i $end
$var wire 32 '" instr_i [31:0] $end
$var wire 5 (" IDEX_RegisterRt_i [4:0] $end
$var reg 1 R IFIDWrite_o $end
$var reg 1 X MUX8_o $end
$var reg 1 J PCWrite_o $end
$upscope $end
$scope module ID_EX $end
$var wire 1 ' clk_i $end
$var wire 4 )" ctrl_EX_i [3:0] $end
$var wire 2 *" ctrl_M_i [1:0] $end
$var wire 2 +" ctrl_WB_i [1:0] $end
$var wire 5 ," instr1115_i [4:0] $end
$var wire 5 -" instr1620_FW_i [4:0] $end
$var wire 5 ." instr1620_MUX_i [4:0] $end
$var wire 5 /" instr2125_i [4:0] $end
$var wire 1 4 stall_i $end
$var wire 32 0" sign_extend_i [31:0] $end
$var wire 32 1" RT_data_i [31:0] $end
$var wire 32 2" RS_data_i [31:0] $end
$var reg 2 3" ALUOp_o [1:0] $end
$var reg 1 4" ALUSrc_o $end
$var reg 32 5" RS_data_o [31:0] $end
$var reg 32 6" RT_data_o [31:0] $end
$var reg 1 7" RegDst_o $end
$var reg 2 8" ctrl_M_o [1:0] $end
$var reg 2 9" ctrl_WB_o [1:0] $end
$var reg 5 :" instr1115_o [4:0] $end
$var reg 5 ;" instr1620_FW_o [4:0] $end
$var reg 5 <" instr1620_MUX_o [4:0] $end
$var reg 5 =" instr2125_o [4:0] $end
$var reg 32 >" sign_extend_o [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 R IFIDWrite_i $end
$var wire 32 ?" addr_i [31:0] $end
$var wire 1 ' clk_i $end
$var wire 1 3 flush_i $end
$var wire 1 4 stall_i $end
$var wire 32 @" instr_i [31:0] $end
$var reg 32 A" addr_o [31:0] $end
$var reg 32 B" instr_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 C" instr_o [31:0] $end
$var wire 32 D" addr_i [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 2 E" WB_i [1:0] $end
$var wire 1 ' clk_i $end
$var wire 32 F" immed_i [31:0] $end
$var wire 5 G" mux3_i [4:0] $end
$var wire 1 4 stall_i $end
$var wire 32 H" ReadData_i [31:0] $end
$var reg 32 I" ReadData_o [31:0] $end
$var reg 2 J" WB_o [1:0] $end
$var reg 32 K" immed_o [31:0] $end
$var reg 5 L" mux3_o [4:0] $end
$upscope $end
$scope module MUX_1 $end
$var wire 32 M" data1_i [31:0] $end
$var wire 32 N" data2_i [31:0] $end
$var wire 1 2 select_i $end
$var reg 32 O" data_o [31:0] $end
$upscope $end
$scope module MUX_2 $end
$var wire 32 P" data1_i [31:0] $end
$var wire 32 Q" data2_i [31:0] $end
$var wire 1 @ select_i $end
$var reg 32 R" data_o [31:0] $end
$upscope $end
$scope module MUX_3 $end
$var wire 5 S" data1_i [4:0] $end
$var wire 5 T" data2_i [4:0] $end
$var wire 1 7" select_i $end
$var reg 5 U" data_o [4:0] $end
$upscope $end
$scope module MUX_4 $end
$var wire 32 V" data2_i [31:0] $end
$var wire 1 4" select_i $end
$var wire 32 W" data1_i [31:0] $end
$var reg 32 X" data_o [31:0] $end
$upscope $end
$scope module MUX_5 $end
$var wire 32 Y" data1_i [31:0] $end
$var wire 32 Z" data2_i [31:0] $end
$var wire 1 [" select_i $end
$var reg 32 \" data_o [31:0] $end
$upscope $end
$scope module MUX_6 $end
$var wire 32 ]" data1_i [31:0] $end
$var wire 32 ^" data2_i [31:0] $end
$var wire 32 _" data3_i [31:0] $end
$var wire 2 `" select_i [1:0] $end
$var reg 32 a" data_o [31:0] $end
$upscope $end
$scope module MUX_7 $end
$var wire 32 b" data1_i [31:0] $end
$var wire 32 c" data2_i [31:0] $end
$var wire 32 d" data3_i [31:0] $end
$var wire 2 e" select_i [1:0] $end
$var reg 32 f" data_o [31:0] $end
$upscope $end
$scope module MUX_8 $end
$var wire 8 g" data1_i [7:0] $end
$var wire 8 h" data2_i [7:0] $end
$var wire 1 X select_i $end
$var reg 8 i" data_o [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ' clk_i $end
$var wire 1 j" pcEnable_i $end
$var wire 32 k" pc_i [31:0] $end
$var wire 1 ( rst_i $end
$var wire 1 ) start_i $end
$var wire 1 4 stall_i $end
$var reg 32 l" pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 m" RDaddr_i [4:0] $end
$var wire 32 n" RDdata_i [31:0] $end
$var wire 5 o" RSaddr_i [4:0] $end
$var wire 32 p" RSdata_o [31:0] $end
$var wire 5 q" RTaddr_i [4:0] $end
$var wire 32 r" RTdata_o [31:0] $end
$var wire 1 s" RegWrite_i $end
$var wire 1 ' clk_i $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 t" data_i [15:0] $end
$var wire 32 u" data_o [31:0] $end
$upscope $end
$scope module dcache $end
$var wire 1 v" cache_dirty $end
$var wire 1 w" cache_sram_enable $end
$var wire 5 x" cache_sram_index [4:0] $end
$var wire 1 y" cache_sram_write $end
$var wire 1 ' clk_i $end
$var wire 256 z" mem_data_o [255:0] $end
$var wire 1 $ mem_enable_o $end
$var wire 1 # mem_write_o $end
$var wire 1 ? p1_MemRead_i $end
$var wire 1 > p1_MemWrite_i $end
$var wire 32 {" p1_addr_i [31:0] $end
$var wire 32 |" p1_data_i [31:0] $end
$var wire 32 }" p1_data_o [31:0] $end
$var wire 1 ~" p1_req $end
$var wire 1 4 p1_stall_o $end
$var wire 256 !# r_hit_data [255:0] $end
$var wire 1 ( rst_i $end
$var wire 1 "# write_hit $end
$var wire 1 ## sram_valid $end
$var wire 22 $# sram_tag [21:0] $end
$var wire 1 %# sram_dirty $end
$var wire 24 &# sram_cache_tag [23:0] $end
$var wire 256 '# sram_cache_data [255:0] $end
$var wire 22 (# p1_tag [21:0] $end
$var wire 5 )# p1_offset [4:0] $end
$var wire 5 *# p1_index [4:0] $end
$var wire 256 +# mem_data_i [255:0] $end
$var wire 32 ,# mem_addr_o [31:0] $end
$var wire 1 " mem_ack_i $end
$var wire 1 -# hit $end
$var wire 24 .# cache_sram_tag [23:0] $end
$var wire 256 /# cache_sram_data [255:0] $end
$var reg 1 0# cache_we $end
$var reg 1 1# mem_enable $end
$var reg 1 2# mem_write $end
$var reg 32 3# p1_data [31:0] $end
$var reg 3 4# state [2:0] $end
$var reg 256 5# w_hit_data [255:0] $end
$var reg 1 6# write_back $end
$var integer 32 7# a [31:0] $end
$var integer 32 8# eeee [31:0] $end
$var integer 32 9# ffff [31:0] $end
$var integer 32 :# flag [31:0] $end
$scope module dcache_data_sram $end
$var wire 5 ;# addr_i [4:0] $end
$var wire 1 ' clk_i $end
$var wire 256 <# data_i [255:0] $end
$var wire 1 w" enable_i $end
$var wire 1 y" write_i $end
$var wire 256 =# data_o [255:0] $end
$upscope $end
$scope module dcache_tag_sram $end
$var wire 5 ># addr_i [4:0] $end
$var wire 1 ' clk_i $end
$var wire 24 ?# data_i [23:0] $end
$var wire 1 w" enable_i $end
$var wire 1 y" write_i $end
$var wire 24 @# data_o [23:0] $end
$upscope $end
$upscope $end
$scope module shiftLeft2_26 $end
$var wire 26 A# data_i [25:0] $end
$var reg 28 B# data_o [27:0] $end
$upscope $end
$scope module shiftLeft2_32 $end
$var wire 32 C# data_i [31:0] $end
$var wire 32 D# data_o [31:0] $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 " ack_o $end
$var wire 32 E# addr_i [31:0] $end
$var wire 1 ' clk_i $end
$var wire 256 F# data_i [255:0] $end
$var wire 256 G# data_o [255:0] $end
$var wire 1 $ enable_i $end
$var wire 1 ( rst_i $end
$var wire 1 # write_i $end
$var wire 27 H# addr [26:0] $end
$var reg 1 I# ack $end
$var reg 4 J# count [3:0] $end
$var reg 256 K# data [255:0] $end
$var reg 1 L# ok $end
$var reg 2 M# state [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 M#
0L#
bx K#
b0 J#
0I#
bx H#
bx G#
bx F#
bx00000 E#
bx00 D#
bx C#
bx B#
bx A#
bx @#
b1xxxxxxxxxxxxxxxxxxxxxxx ?#
bx >#
bx =#
bx <#
bx ;#
b0 :#
bx 9#
bx 8#
bx 7#
06#
bx 5#
b0 4#
bx 3#
02#
01#
00#
bx /#
b1xxxxxxxxxxxxxxxxxxxxxxx .#
x-#
bx00000 ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
x%#
bx $#
x##
x"#
bx !#
x~"
bx }"
bx |"
bx {"
bx z"
xy"
bx x"
xw"
xv"
bx u"
bx t"
xs"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
b0 l"
b100 k"
xj"
bx i"
b0 h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
x["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
b100 R"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx Q"
b100 P"
b100 O"
bx N"
b100 M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
b0 D"
b100000000010000000000000000000 C"
bx B"
bx A"
b100000000010000000000000000000 @"
b100 ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
x7"
bx 6"
bx 5"
x4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
x&"
bx %"
bx $"
bx #"
bx ""
bx !"
x~
bx }
bx |
x{
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b0 n
b100 m
b100 l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx00 b
bx a
bx `
bx _
b100 ^
bx ]
bx \
bx [
bx Z
xY
xX
bx W
bx V
bx U
bx T
bx S
xR
b100000000010000000000000000000 Q
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx P
bx O
bx N
bx M
bx L
bx K
xJ
bx I
bx H
bx G
bx F
xE
bx D
bx C
bx B
b0 A
x@
x?
x>
bx00000 =
bx <
bx ;
b100 :
b100 9
bx 8
bx 7
bx 6
bx 5
x4
x3
x2
b101 1
b11 0
b100000 /
b1 .
bx -
bx ,
x+
bx *
0)
0(
0'
bx00000 &
bx %
0$
0#
0"
bx !
$end
#12
1)
1(
#25
1'
#50
b10 .
b1 :#
0'
#75
1'
#100
b11 .
b10 :#
0'
#125
1'
#150
b100 .
b11 :#
0'
#175
1'
#200
b101 .
b100 :#
0'
#225
1'
#250
b110 .
b101 :#
0'
#275
1'
#300
b111 .
b110 :#
0'
#325
1'
#350
b1000 .
b111 :#
0'
#375
1'
#400
b1001 .
b1000 :#
0'
#425
1'
#450
b1010 .
b1001 :#
0'
#475
1'
#500
b1011 .
b1010 :#
0'
#525
1'
#550
b1100 .
b1011 :#
0'
#575
1'
#600
b1101 .
b1100 :#
0'
#625
1'
#650
b1110 .
b1101 :#
0'
#675
1'
#700
b1111 .
b1110 :#
0'
#725
1'
#750
b10000 .
b1111 :#
0'
#775
1'
#800
b10001 .
b10000 :#
0'
#825
1'
#850
b10010 .
b10001 :#
0'
#875
1'
#900
b10011 .
b10010 :#
0'
#925
1'
#950
b10100 .
b10011 :#
0'
#975
1'
#1000
b10101 .
b10100 :#
0'
#1025
1'
#1050
b10110 .
b10101 :#
0'
#1075
1'
#1100
b10111 .
b10110 :#
0'
#1125
1'
#1150
b11000 .
b10111 :#
0'
#1175
1'
#1200
b11001 .
b11000 :#
0'
#1225
1'
#1250
b11010 .
b11001 :#
0'
#1275
1'
#1300
b11011 .
b11010 :#
0'
#1325
1'
#1350
b11100 .
b11011 :#
0'
#1375
1'
#1400
b11101 .
b11100 :#
0'
#1425
1'
#1450
b11110 .
b11101 :#
0'
#1475
1'
#1500
b11111 .
b11110 :#
0'
#1525
1'
#1550
b100000 .
b11111 :#
0'
#1575
1'
#1600
b100001 .
b100000 :#
0'
#1625
1'
#1650
b100010 .
b100001 :#
0'
#1675
1'
#1700
b100011 .
b100010 :#
0'
#1725
1'
#1750
b100100 .
b100011 :#
0'
#1775
1'
#1800
b100101 .
b100100 :#
0'
#1825
1'
#1850
b100110 .
b100101 :#
0'
#1875
1'
#1900
b100111 .
b100110 :#
0'
#1925
1'
#1950
b101000 .
b100111 :#
0'
#1975
1'
#2000
b101001 .
b101000 :#
0'
#2025
1'
#2050
b101010 .
b101001 :#
0'
#2075
1'
#2100
b101011 .
b101010 :#
0'
#2125
1'
#2150
b101100 .
b101011 :#
0'
#2175
1'
#2200
b101101 .
b101100 :#
0'
#2225
1'
#2250
b101110 .
b101101 :#
0'
#2275
1'
#2300
b101111 .
b101110 :#
0'
#2325
1'
#2350
b110000 .
b101111 :#
0'
#2375
1'
#2400
b110001 .
b110000 :#
0'
#2425
1'
#2450
b110010 .
b110001 :#
0'
#2475
1'
#2500
b110011 .
b110010 :#
0'
#2525
1'
#2550
b110100 .
b110011 :#
0'
#2575
1'
#2600
b110101 .
b110100 :#
0'
#2625
1'
#2650
b110110 .
b110101 :#
0'
#2675
1'
#2700
b110111 .
b110110 :#
0'
#2725
1'
#2750
b111000 .
b110111 :#
0'
#2775
1'
#2800
b111001 .
b111000 :#
0'
#2825
1'
#2850
b111010 .
b111001 :#
0'
#2875
1'
#2900
b111011 .
b111010 :#
0'
#2925
1'
#2950
b111100 .
b111011 :#
0'
#2975
1'
#3000
b111101 .
b111100 :#
0'
#3025
1'
#3050
b111110 .
b111101 :#
0'
#3075
1'
#3100
b111111 .
b111110 :#
0'
#3125
1'
#3150
b1000000 .
b111111 :#
0'
#3175
1'
#3200
b1000001 .
b1000000 :#
0'
#3225
1'
#3250
b1000010 .
b1000001 :#
0'
#3275
1'
#3300
b1000011 .
b1000010 :#
0'
#3325
1'
#3350
b1000100 .
b1000011 :#
0'
#3375
1'
#3400
b1000101 .
b1000100 :#
0'
#3425
1'
#3450
b1000110 .
b1000101 :#
0'
#3475
1'
#3500
b1000111 .
b1000110 :#
0'
#3525
1'
#3550
b1001000 .
b1000111 :#
0'
#3575
1'
#3600
b1001001 .
b1001000 :#
0'
#3625
1'
#3650
b1001010 .
b1001001 :#
0'
#3675
1'
#3700
b1001011 .
b1001010 :#
0'
#3725
1'
#3750
b1001100 .
b1001011 :#
0'
#3775
1'
#3800
b1001101 .
b1001100 :#
0'
#3825
1'
#3850
b1001110 .
b1001101 :#
0'
#3875
1'
#3900
b1001111 .
b1001110 :#
0'
#3925
1'
#3950
b1010000 .
b1001111 :#
0'
#3975
1'
#4000
b1010001 .
b1010000 :#
0'
#4025
1'
#4050
b1010010 .
b1010001 :#
0'
#4075
1'
#4100
b1010011 .
b1010010 :#
0'
#4125
1'
#4150
b1010100 .
b1010011 :#
0'
#4175
1'
#4200
b1010101 .
b1010100 :#
0'
#4225
1'
#4250
b1010110 .
b1010101 :#
0'
#4275
1'
#4300
b1010111 .
b1010110 :#
0'
#4325
1'
#4350
b1011000 .
b1010111 :#
0'
#4375
1'
#4400
b1011001 .
b1011000 :#
0'
#4425
1'
#4450
b1011010 .
b1011001 :#
0'
#4475
1'
#4500
b1011011 .
b1011010 :#
0'
#4525
1'
#4550
b1011100 .
b1011011 :#
0'
#4575
1'
#4600
b1011101 .
b1011100 :#
0'
#4625
1'
#4650
b1011110 .
b1011101 :#
0'
#4675
1'
#4700
b1011111 .
b1011110 :#
0'
#4725
1'
#4750
b1100000 .
b1011111 :#
0'
#4775
1'
#4800
b1100001 .
b1100000 :#
0'
#4825
1'
#4850
b1100010 .
b1100001 :#
0'
#4875
1'
#4900
b1100011 .
b1100010 :#
0'
#4925
1'
#4950
b1100100 .
b1100011 :#
0'
#4975
1'
#5000
b1100101 .
b1100100 :#
0'
#5025
1'
#5050
b1100110 .
b1100101 :#
0'
#5075
1'
#5100
b1100111 .
b1100110 :#
0'
#5125
1'
#5150
b1101000 .
b1100111 :#
0'
#5175
1'
#5200
b1101001 .
b1101000 :#
0'
#5225
1'
#5250
b1101010 .
b1101001 :#
0'
#5275
1'
#5300
b1101011 .
b1101010 :#
0'
#5325
1'
#5350
b1101100 .
b1101011 :#
0'
#5375
1'
#5400
b1101101 .
b1101100 :#
0'
#5425
1'
#5450
b1101110 .
b1101101 :#
0'
#5475
1'
#5500
b1101111 .
b1101110 :#
0'
#5525
1'
#5550
b1110000 .
b1101111 :#
0'
#5575
1'
#5600
b1110001 .
b1110000 :#
0'
#5625
1'
#5650
b1110010 .
b1110001 :#
0'
#5675
1'
#5700
b1110011 .
b1110010 :#
0'
#5725
1'
#5750
b1110100 .
b1110011 :#
0'
#5775
1'
#5800
b1110101 .
b1110100 :#
0'
#5825
1'
#5850
b1110110 .
b1110101 :#
0'
#5875
1'
#5900
b1110111 .
b1110110 :#
0'
#5925
1'
#5950
b1111000 .
b1110111 :#
0'
#5975
1'
#6000
b1111001 .
b1111000 :#
0'
#6025
1'
#6050
b1111010 .
b1111001 :#
0'
#6075
1'
#6100
b1111011 .
b1111010 :#
0'
#6125
1'
#6150
b1111100 .
b1111011 :#
0'
#6175
1'
#6200
b1111101 .
b1111100 :#
0'
#6225
1'
#6250
b1111110 .
b1111101 :#
0'
#6275
1'
#6300
b1111111 .
b1111110 :#
0'
#6325
1'
#6350
b10000000 .
b1111111 :#
0'
#6375
1'
#6400
b10000001 .
b10000000 :#
0'
#6425
1'
#6450
b10000010 .
b10000001 :#
0'
#6475
1'
#6500
b10000011 .
b10000010 :#
0'
#6525
1'
#6550
b10000100 .
b10000011 :#
0'
#6575
1'
#6600
b10000101 .
b10000100 :#
0'
#6625
1'
#6650
b10000110 .
b10000101 :#
0'
#6675
1'
#6700
b10000111 .
b10000110 :#
0'
#6725
1'
#6750
b10001000 .
b10000111 :#
0'
#6775
1'
#6800
b10001001 .
b10001000 :#
0'
#6825
1'
#6850
b10001010 .
b10001001 :#
0'
#6875
1'
#6900
b10001011 .
b10001010 :#
0'
#6925
1'
#6950
b10001100 .
b10001011 :#
0'
#6975
1'
#7000
b10001101 .
b10001100 :#
0'
#7025
1'
#7050
b10001110 .
b10001101 :#
0'
#7075
1'
#7100
b10001111 .
b10001110 :#
0'
#7125
1'
#7150
b10010000 .
b10001111 :#
0'
#7175
1'
#7200
b10010001 .
b10010000 :#
0'
#7225
1'
#7250
b10010010 .
b10010001 :#
0'
#7275
1'
#7300
b10010011 .
b10010010 :#
0'
#7325
1'
#7350
b10010100 .
b10010011 :#
0'
#7375
1'
#7400
b10010101 .
b10010100 :#
0'
#7425
1'
#7450
b10010110 .
b10010101 :#
0'
#7475
1'
#7500
b10010111 .
b11111 *
b11111 ,
b0 -
b100000 /
b10010110 :#
0'
#7525
1'
#7550
