$date
	Fri Dec 23 02:17:33 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var wire 32 ! cpu_mem_addr [31:0] $end
$var wire 256 " cpu_mem_data [255:0] $end
$var wire 1 # cpu_mem_enable $end
$var wire 1 $ cpu_mem_write $end
$var wire 1 % mem_cpu_ack $end
$var wire 256 & mem_cpu_data [255:0] $end
$var reg 1 ' Clk $end
$var reg 1 ( Reset $end
$var reg 1 ) Start $end
$var reg 27 * address [26:0] $end
$var integer 32 + counter [31:0] $end
$var reg 1 , flag $end
$var integer 32 - i [31:0] $end
$var reg 5 . index [4:0] $end
$var integer 32 / outfile [31:0] $end
$var integer 32 0 outfile2 [31:0] $end
$var reg 24 1 tag [23:0] $end
$scope module CPU $end
$var wire 32 2 ALUresult [31:0] $end
$var wire 32 3 Add_pc_o [31:0] $end
$var wire 2 4 EX_M [1:0] $end
$var wire 5 5 EX_Rt [4:0] $end
$var wire 2 6 EX_WB [1:0] $end
$var wire 32 7 EX_extend [31:0] $end
$var wire 1 8 Eq_flag $end
$var wire 1 9 HazardMUX_8 $end
$var wire 32 : ID_addr [31:0] $end
$var wire 32 ; ID_rs [31:0] $end
$var wire 32 < ID_rt [31:0] $end
$var wire 5 = IERs [4:0] $end
$var wire 5 > IERt [4:0] $end
$var wire 1 ? IFIDWrite $end
$var wire 32 @ IF_inst [31:0] $end
$var wire 32 A JUMP_Addr [31:0] $end
$var wire 32 B MEM_ALUOut [31:0] $end
$var wire 5 C MEM_mux3 [4:0] $end
$var wire 8 D MUX8_data [7:0] $end
$var wire 32 E MUX_5Out [31:0] $end
$var wire 32 F MUX_7Out [31:0] $end
$var wire 1 G PCWrite $end
$var wire 2 H WB_WBState [1:0] $end
$var wire 2 I WB_memState [1:0] $end
$var wire 5 J WB_mux3 [4:0] $end
$var wire 32 K am1 [31:0] $end
$var wire 1 L branch_flag $end
$var wire 1 M branch_flagT $end
$var wire 1 N clk_i $end
$var wire 8 O cm8 [7:0] $end
$var wire 32 P extended [31:0] $end
$var wire 1 Q flush $end
$var wire 32 R inst [31:0] $end
$var wire 32 S inst_addr [31:0] $end
$var wire 1 T jump_flag $end
$var wire 1 U memRead $end
$var wire 1 V memWrite $end
$var wire 1 % mem_ack_i $end
$var wire 32 W mem_addr_o [31:0] $end
$var wire 256 X mem_data_i [255:0] $end
$var wire 256 Y mem_data_o [255:0] $end
$var wire 1 # mem_enable_o $end
$var wire 1 $ mem_write_o $end
$var wire 32 Z mux1Out [31:0] $end
$var wire 5 [ mux3EXMEM [4:0] $end
$var wire 32 \ mux4ALU [31:0] $end
$var wire 32 ] mux6ALU [31:0] $end
$var wire 32 ^ mux7Write [31:0] $end
$var wire 1 _ rst_i $end
$var wire 1 ` stall $end
$var wire 1 a start_i $end
$scope module Control $end
$var wire 32 b data_in [31:0] $end
$var reg 1 c branch $end
$var reg 8 d data_out [7:0] $end
$var reg 1 e jump $end
$upscope $end
$scope module Add_PC $end
$var wire 32 f data1_in [31:0] $end
$var wire 32 g data2_in [31:0] $end
$var wire 32 h data_o [31:0] $end
$upscope $end
$scope module ADD $end
$var wire 32 i data1_in [31:0] $end
$var wire 32 j data2_in [31:0] $end
$var wire 32 k data_o [31:0] $end
$upscope $end
$scope module shiftLeft2_32 $end
$var wire 32 l data_i [31:0] $end
$var wire 32 m data_o [31:0] $end
$upscope $end
$scope module shiftLeft2_26 $end
$var wire 26 n data_i [25:0] $end
$var reg 28 o data_o [27:0] $end
$upscope $end
$scope module MUX_1 $end
$var wire 32 p data1_i [31:0] $end
$var wire 32 q data2_i [31:0] $end
$var wire 1 L select_i $end
$var reg 32 r data_o [31:0] $end
$upscope $end
$scope module MUX_2 $end
$var wire 32 s data1_i [31:0] $end
$var wire 32 t data2_i [31:0] $end
$var wire 1 T select_i $end
$var reg 32 u data_o [31:0] $end
$upscope $end
$scope module MUX_3 $end
$var wire 5 v data1_i [4:0] $end
$var wire 5 w data2_i [4:0] $end
$var wire 1 x select_i $end
$var reg 5 y data_o [4:0] $end
$upscope $end
$scope module MUX_4 $end
$var wire 32 z data1_i [31:0] $end
$var wire 32 { data2_i [31:0] $end
$var wire 1 | select_i $end
$var reg 32 } data_o [31:0] $end
$upscope $end
$scope module MUX_5 $end
$var wire 32 ~ data1_i [31:0] $end
$var wire 32 !" data2_i [31:0] $end
$var wire 1 "" select_i $end
$var reg 32 #" data_o [31:0] $end
$upscope $end
$scope module MUX_6 $end
$var wire 32 $" data1_i [31:0] $end
$var wire 32 %" data2_i [31:0] $end
$var wire 32 &" data3_i [31:0] $end
$var wire 2 '" select_i [1:0] $end
$var reg 32 (" data_o [31:0] $end
$upscope $end
$scope module MUX_7 $end
$var wire 32 )" data1_i [31:0] $end
$var wire 32 *" data2_i [31:0] $end
$var wire 32 +" data3_i [31:0] $end
$var wire 2 ," select_i [1:0] $end
$var reg 32 -" data_o [31:0] $end
$upscope $end
$scope module MUX_8 $end
$var wire 8 ." data1_i [7:0] $end
$var wire 8 /" data2_i [7:0] $end
$var wire 1 9 select_i $end
$var reg 8 0" data_o [7:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 1" data_i [15:0] $end
$var wire 32 2" data_o [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 3 3" ALUCtrl_i [2:0] $end
$var wire 32 4" data1_i [31:0] $end
$var wire 32 5" data2_i [31:0] $end
$var wire 32 6" data_o [31:0] $end
$var reg 32 7" result_temp [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 3 8" ALUCtrl_o [2:0] $end
$var wire 2 9" ALUOp_i [1:0] $end
$var wire 6 :" funct_i [5:0] $end
$var reg 3 ;" aluCtrl_temp [2:0] $end
$upscope $end
$scope module HazardDetection $end
$var wire 1 <" IDEX_MemRead_i $end
$var wire 5 =" IDEX_RegisterRt_i [4:0] $end
$var wire 32 >" instr_i [31:0] $end
$var reg 1 ?" IFIDWrite_o $end
$var reg 1 @" MUX8_o $end
$var reg 1 A" PCWrite_o $end
$upscope $end
$scope module IF_ID $end
$var wire 1 ? IFIDWrite_i $end
$var wire 32 B" addr_i [31:0] $end
$var wire 1 N clk_i $end
$var wire 1 Q flush_i $end
$var wire 32 C" instr_i [31:0] $end
$var wire 1 ` stall_i $end
$var reg 32 D" addr_o [31:0] $end
$var reg 32 E" instr_o [31:0] $end
$upscope $end
$scope module ID_EX $end
$var wire 32 F" RS_data_i [31:0] $end
$var wire 32 G" RT_data_i [31:0] $end
$var wire 1 N clk_i $end
$var wire 4 H" ctrl_EX_i [3:0] $end
$var wire 2 I" ctrl_M_i [1:0] $end
$var wire 2 J" ctrl_WB_i [1:0] $end
$var wire 5 K" instr1115_i [4:0] $end
$var wire 5 L" instr1620_FW_i [4:0] $end
$var wire 5 M" instr1620_MUX_i [4:0] $end
$var wire 5 N" instr2125_i [4:0] $end
$var wire 32 O" sign_extend_i [31:0] $end
$var wire 1 ` stall_i $end
$var reg 2 P" ALUOp_o [1:0] $end
$var reg 1 Q" ALUSrc_o $end
$var reg 32 R" RS_data_o [31:0] $end
$var reg 32 S" RT_data_o [31:0] $end
$var reg 1 T" RegDst_o $end
$var reg 2 U" ctrl_M_o [1:0] $end
$var reg 2 V" ctrl_WB_o [1:0] $end
$var reg 5 W" instr1115_o [4:0] $end
$var reg 5 X" instr1620_FW_o [4:0] $end
$var reg 5 Y" instr1620_MUX_o [4:0] $end
$var reg 5 Z" instr2125_o [4:0] $end
$var reg 32 [" sign_extend_o [31:0] $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 \" ALUOut_i [31:0] $end
$var wire 2 ]" MEM_i [1:0] $end
$var wire 2 ^" WB_i [1:0] $end
$var wire 1 N clk_i $end
$var wire 5 _" mux3_i [4:0] $end
$var wire 32 `" mux7_i [31:0] $end
$var wire 1 ` stall_i $end
$var reg 32 a" ALUOut_o [31:0] $end
$var reg 1 b" MemRead_o $end
$var reg 1 c" MemWrite_o $end
$var reg 2 d" WB_o [1:0] $end
$var reg 5 e" mux3_o [4:0] $end
$var reg 32 f" mux7_o [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 32 g" ReadData_i [31:0] $end
$var wire 2 h" WB_i [1:0] $end
$var wire 1 N clk_i $end
$var wire 32 i" immed_i [31:0] $end
$var wire 5 j" mux3_i [4:0] $end
$var wire 1 ` stall_i $end
$var reg 32 k" ReadData_o [31:0] $end
$var reg 2 l" WB_o [1:0] $end
$var reg 32 m" immed_o [31:0] $end
$var reg 5 n" mux3_o [4:0] $end
$upscope $end
$scope module ForwardingUnit $end
$var wire 5 o" EX_MEM_RegRd_i [4:0] $end
$var wire 1 p" EX_MEM_regWrite_i $end
$var wire 2 q" ForwardA_o [1:0] $end
$var wire 2 r" ForwardB_o [1:0] $end
$var wire 5 s" ID_EX_RegRs [4:0] $end
$var wire 5 t" ID_EX_RegRt [4:0] $end
$var wire 5 u" MEM_WB_RegRd_i [4:0] $end
$var wire 1 v" MEM_WB_regWrite_i $end
$var reg 2 w" fa_temp [1:0] $end
$var reg 2 x" fb_temp [1:0] $end
$upscope $end
$scope module PC $end
$var wire 1 N clk_i $end
$var wire 1 y" pcEnable_i $end
$var wire 32 z" pc_i [31:0] $end
$var wire 1 _ rst_i $end
$var wire 1 ` stall_i $end
$var wire 1 a start_i $end
$var reg 32 {" pc_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 |" addr_i [31:0] $end
$var wire 32 }" instr_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 ~" RDaddr_i [4:0] $end
$var wire 32 !# RDdata_i [31:0] $end
$var wire 5 "# RSaddr_i [4:0] $end
$var wire 32 ## RSdata_o [31:0] $end
$var wire 5 $# RTaddr_i [4:0] $end
$var wire 32 %# RTdata_o [31:0] $end
$var wire 1 &# RegWrite_i $end
$var wire 1 N clk_i $end
$upscope $end
$scope module dcache $end
$var wire 1 '# cache_dirty $end
$var wire 256 (# cache_sram_data [255:0] $end
$var wire 1 )# cache_sram_enable $end
$var wire 5 *# cache_sram_index [4:0] $end
$var wire 24 +# cache_sram_tag [23:0] $end
$var wire 1 ,# cache_sram_write $end
$var wire 1 N clk_i $end
$var wire 1 -# hit $end
$var wire 1 % mem_ack_i $end
$var wire 32 .# mem_addr_o [31:0] $end
$var wire 256 /# mem_data_i [255:0] $end
$var wire 256 0# mem_data_o [255:0] $end
$var wire 1 # mem_enable_o $end
$var wire 1 $ mem_write_o $end
$var wire 1 U p1_MemRead_i $end
$var wire 1 V p1_MemWrite_i $end
$var wire 32 1# p1_addr_i [31:0] $end
$var wire 32 2# p1_data_i [31:0] $end
$var wire 32 3# p1_data_o [31:0] $end
$var wire 5 4# p1_index [4:0] $end
$var wire 5 5# p1_offset [4:0] $end
$var wire 1 6# p1_req $end
$var wire 1 ` p1_stall_o $end
$var wire 22 7# p1_tag [21:0] $end
$var wire 256 8# r_hit_data [255:0] $end
$var wire 1 _ rst_i $end
$var wire 256 9# sram_cache_data [255:0] $end
$var wire 24 :# sram_cache_tag [23:0] $end
$var wire 1 ;# sram_dirty $end
$var wire 22 <# sram_tag [21:0] $end
$var wire 1 =# sram_valid $end
$var wire 1 ># write_hit $end
$var reg 1 ?# cache_we $end
$var integer 32 @# flag [31:0] $end
$var reg 256 A# i [255:0] $end
$var reg 1 B# mem_enable $end
$var reg 1 C# mem_write $end
$var reg 32 D# p1_data [31:0] $end
$var reg 3 E# state [2:0] $end
$var reg 256 F# w_hit_data [255:0] $end
$var reg 1 G# write_back $end
$scope module dcache_tag_sram $end
$var wire 5 H# addr_i [4:0] $end
$var wire 1 N clk_i $end
$var wire 24 I# data_i [23:0] $end
$var wire 24 J# data_o [23:0] $end
$var wire 1 )# enable_i $end
$var wire 1 ,# write_i $end
$upscope $end
$scope module dcache_data_sram $end
$var wire 5 K# addr_i [4:0] $end
$var wire 1 N clk_i $end
$var wire 256 L# data_i [255:0] $end
$var wire 256 M# data_o [255:0] $end
$var wire 1 )# enable_i $end
$var wire 1 ,# write_i $end
$upscope $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 % ack_o $end
$var wire 27 N# addr [26:0] $end
$var wire 32 O# addr_i [31:0] $end
$var wire 1 N clk_i $end
$var wire 256 P# data_i [255:0] $end
$var wire 256 Q# data_o [255:0] $end
$var wire 1 # enable_i $end
$var wire 1 _ rst_i $end
$var wire 1 $ write_i $end
$var reg 1 R# ack $end
$var reg 4 S# count [3:0] $end
$var reg 256 T# data [255:0] $end
$var reg 1 U# ok $end
$var reg 2 V# state [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 V#
0U#
bx T#
b0 S#
0R#
bx Q#
bx P#
bx00000 O#
bx N#
bx M#
bx L#
bx K#
bx J#
b1xxxxxxxxxxxxxxxxxxxxxxx I#
bx H#
0G#
bx F#
b0 E#
b0 D#
0C#
0B#
bx A#
b0 @#
0?#
x>#
x=#
bx <#
x;#
bx :#
bx 9#
bx 8#
bx 7#
x6#
bx 5#
bx 4#
b0 3#
bx 2#
bx 1#
bx 0#
bx /#
bx00000 .#
x-#
x,#
b1xxxxxxxxxxxxxxxxxxxxxxx +#
bx *#
x)#
bx (#
x'#
x&#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
b100000000010000000000000000000 }"
b0 |"
b0 {"
bx z"
1y"
b0 x"
b0 w"
xv"
bx u"
bx t"
bx s"
b0 r"
b0 q"
xp"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
b0 g"
bx f"
bx e"
bx d"
xc"
xb"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
xT"
bx S"
bx R"
xQ"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
b100000000010000000000000000000 C"
b100 B"
0A"
0@"
0?"
bx >"
bx ="
x<"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
b0 /"
bx ."
bx -"
b0 ,"
bx +"
bx *"
bx )"
bx ("
b0 '"
bx &"
bx %"
bx $"
bx #"
x""
bx !"
bx ~
bx }
x|
bx {
bx z
bx y
xx
bx w
bx v
b100 u
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 t
b100 s
b100 r
bx q
b100 p
bx00 o
bx n
bx00 m
bx l
bx k
bx j
bx00 i
b100 h
b100 g
b0 f
xe
bx d
xc
bx b
0a
0`
0_
bx ^
bx ]
bx \
bx [
b100 Z
bx Y
bx X
bx00000 W
xV
xU
xT
b0 S
bx R
xQ
bx P
bx O
0N
xM
xL
bx K
bx J
bx I
bx H
0G
bx F
bx E
bx D
bx C
bx B
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 A
b100000000010000000000000000000 @
0?
bx >
bx =
bx <
bx ;
bx :
09
x8
bx 7
bx 6
bx 5
bx 4
b100 3
bx 2
bx 1
b101 0
b11 /
bx .
b100000 -
x,
b1 +
bx *
0)
0(
0'
bx &
0%
0$
0#
bx "
bx00000 !
$end
#12
1)
1a
1(
1_
#25
b1 @#
1'
1N
#50
b1100 H"
b0 I"
b10 J"
b10001100 0"
b10001100 D
b1000000000000000000000 o
b10001100 d
b10001100 O
b10001100 ."
b100 K
b100 k
b100 q
bx0000001000000000000000000000 A
bx0000001000000000000000000000 t
bx u
0Q
0L
b0 i
b0 m
bx @
bx C"
bx }"
bx r
bx Z
bx s
0e
0T
0c
0M
b1000 $#
18
b0 <
b0 G"
b0 %#
b0 "#
b0 ;
b0 F"
b0 ##
b0 N"
b1000 L"
b1000 M"
b0 K"
b0 1"
b0 P
b0 l
b0 2"
b0 O"
b10000000000000000000 n
bx {"
bx 3
bx h
bx p
bx B"
bx S
bx f
bx |"
b0 k"
b0 !"
b100000000010000000000000000000 E"
b100000000010000000000000000000 R
b100000000010000000000000000000 b
b100000000010000000000000000000 >"
b100 D"
b100 :
b100 j
b10 +
0,
0'
0N
#75
b10 @#
1'
1N
#100
bx00 o
bx00 A
bx00 t
bx00 i
bx00 m
b0 7"
b0 2
b0 6"
b0 \"
bx $#
bx <
bx G"
bx %#
bx "#
x8
bx ;
bx F"
bx ##
bx N"
bx L"
bx M"
bx K"
bx 1"
bx P
bx l
bx 2"
bx O"
bx n
b10 ;"
b10 3"
b10 8"
0<"
b0 -"
b0 F
b0 z
b0 `"
b0 ("
b0 ]
b0 4"
b0 }
b0 \
b0 5"
b0 :"
b1000 y
b1000 [
b1000 _"
bx E"
bx R
bx b
bx >"
bx D"
bx K
bx k
bx q
bx :
bx j
1Q"
1|
b10 P"
b10 9"
0T"
0x
b0 U"
b0 4
b0 ]"
b10 V"
b10 6
b10 ^"
b0 S"
b0 )"
b0 R"
b0 $"
b0 ["
b0 7
b0 {
b0 Z"
b0 =
b0 s"
b1000 X"
b1000 >
b1000 t"
b1000 Y"
b1000 5
b1000 v
b1000 ="
b0 W"
b0 w
b11 +
0'
0N
#125
b11 @#
1'
1N
#150
0-#
b0 N#
b0 <#
0;#
0=#
0,#
b0 :#
b0 J#
b0 9#
b0 M#
b0 8#
b0 "
b0 Y
b0 0#
b0 P#
b0 !
b0 W
b0 .#
b0 O#
bx 7"
bx 2
bx 6"
bx \"
0'#
0>#
0)#
06#
b0 F#
b0 5#
b0 4#
b0 *#
b0 H#
b0 K#
b100000000000000000000000 +#
b100000000000000000000000 I#
b0 7#
1p"
bx -"
bx F
bx z
bx `"
bx ("
bx ]
bx 4"
bx }
bx \
bx 5"
bx :"
bx y
bx [
bx _"
0c"
0V
0b"
0U
b1000 e"
b1000 C
b1000 j"
b1000 o"
b0 f"
b0 ^
b0 2#
b0 a"
b0 B
b0 &"
b0 +"
b0 i"
b0 1#
b10 d"
b10 I
b10 h"
bx S"
bx )"
bx R"
bx $"
bx ["
bx 7
bx {
bx Z"
bx =
bx s"
bx X"
bx >
bx t"
bx Y"
bx 5
bx v
bx ="
bx W"
bx w
b100 +
0'
0N
#175
b100 @#
1'
1N
#200
bx N#
bx00000 !
bx00000 W
bx00000 .#
bx00000 O#
bx F#
bx 5#
bx 4#
bx *#
bx H#
bx K#
b10xxxxxxxxxxxxxxxxxxxxxx +#
b10xxxxxxxxxxxxxxxxxxxxxx I#
bx 7#
b0 #"
b0 E
b0 %"
b0 *"
b0 !#
1&#
1v"
0""
bx e"
bx C
bx j"
bx o"
bx f"
bx ^
bx 2#
bx a"
bx B
bx &"
bx +"
bx i"
bx 1#
b1000 n"
b1000 J
b1000 u"
b1000 ~"
b0 m"
b0 ~
b10 l"
b10 H
b101 +
0'
0N
#225
b101 @#
1'
1N
#250
bx #"
bx E
bx %"
bx *"
bx !#
bx n"
bx J
bx u"
bx ~"
bx m"
bx ~
b110 +
0'
0N
#275
b110 @#
1'
1N
#300
b111 +
0'
0N
#325
b111 @#
1'
1N
#350
b1000 +
0'
0N
#375
b1000 @#
1'
1N
#400
b1001 +
0'
0N
#425
b1001 @#
1'
1N
#450
b1010 +
0'
0N
#475
b1010 @#
1'
1N
#500
b1011 +
0'
0N
#525
b1011 @#
1'
1N
#550
b1100 +
0'
0N
#575
b1100 @#
1'
1N
#600
b1101 +
0'
0N
#625
b1101 @#
1'
1N
#650
b1110 +
0'
0N
#675
b1110 @#
1'
1N
#700
b1111 +
0'
0N
#725
b1111 @#
1'
1N
#750
b10000 +
0'
0N
#775
b10000 @#
1'
1N
#800
b10001 +
0'
0N
#825
b10001 @#
1'
1N
#850
b10010 +
0'
0N
#875
b10010 @#
1'
1N
#900
b10011 +
0'
0N
#925
b10011 @#
1'
1N
#950
b10100 +
0'
0N
#975
b10100 @#
1'
1N
#1000
b10101 +
0'
0N
#1025
b10101 @#
1'
1N
#1050
b10110 +
0'
0N
#1075
b10110 @#
1'
1N
#1100
b10111 +
0'
0N
#1125
b10111 @#
1'
1N
#1150
b11000 +
0'
0N
#1175
b11000 @#
1'
1N
#1200
b11001 +
0'
0N
#1225
b11001 @#
1'
1N
#1250
b11010 +
0'
0N
#1275
b11010 @#
1'
1N
#1300
b11011 +
0'
0N
#1325
b11011 @#
1'
1N
#1350
b11100 +
0'
0N
#1375
b11100 @#
1'
1N
#1400
b11101 +
0'
0N
#1425
b11101 @#
1'
1N
#1450
b11110 +
0'
0N
#1475
b11110 @#
1'
1N
#1500
b11111 +
0'
0N
#1525
b11111 @#
1'
1N
#1550
b100000 +
0'
0N
#1575
b100000 @#
1'
1N
#1600
b100001 +
0'
0N
#1625
b100001 @#
1'
1N
#1650
b100010 +
0'
0N
#1675
b100010 @#
1'
1N
#1700
b100011 +
0'
0N
#1725
b100011 @#
1'
1N
#1750
b100100 +
0'
0N
#1775
b100100 @#
1'
1N
#1800
b100101 +
0'
0N
#1825
b100101 @#
1'
1N
#1850
b100110 +
0'
0N
#1875
b100110 @#
1'
1N
#1900
b100111 +
0'
0N
#1925
b100111 @#
1'
1N
#1950
b101000 +
0'
0N
#1975
b101000 @#
1'
1N
#2000
b101001 +
0'
0N
#2025
b101001 @#
1'
1N
#2050
b101010 +
0'
0N
#2075
b101010 @#
1'
1N
#2100
b101011 +
0'
0N
#2125
b101011 @#
1'
1N
#2150
b101100 +
0'
0N
#2175
b101100 @#
1'
1N
#2200
b101101 +
0'
0N
#2225
b101101 @#
1'
1N
#2250
b101110 +
0'
0N
#2275
b101110 @#
1'
1N
#2300
b101111 +
0'
0N
#2325
b101111 @#
1'
1N
#2350
b110000 +
0'
0N
#2375
b110000 @#
1'
1N
#2400
b110001 +
0'
0N
#2425
b110001 @#
1'
1N
#2450
b110010 +
0'
0N
#2475
b110010 @#
1'
1N
#2500
b110011 +
0'
0N
#2525
b110011 @#
1'
1N
#2550
b110100 +
0'
0N
#2575
b110100 @#
1'
1N
#2600
b110101 +
0'
0N
#2625
b110101 @#
1'
1N
#2650
b110110 +
0'
0N
#2675
b110110 @#
1'
1N
#2700
b110111 +
0'
0N
#2725
b110111 @#
1'
1N
#2750
b111000 +
0'
0N
#2775
b111000 @#
1'
1N
#2800
b111001 +
0'
0N
#2825
b111001 @#
1'
1N
#2850
b111010 +
0'
0N
#2875
b111010 @#
1'
1N
#2900
b111011 +
0'
0N
#2925
b111011 @#
1'
1N
#2950
b111100 +
0'
0N
#2975
b111100 @#
1'
1N
#3000
b111101 +
0'
0N
#3025
b111101 @#
1'
1N
#3050
b111110 +
0'
0N
#3075
b111110 @#
1'
1N
#3100
b111111 +
0'
0N
#3125
b111111 @#
1'
1N
#3150
b1000000 +
0'
0N
#3175
b1000000 @#
1'
1N
#3200
b1000001 +
0'
0N
#3225
b1000001 @#
1'
1N
#3250
b1000010 +
0'
0N
#3275
b1000010 @#
1'
1N
#3300
b1000011 +
0'
0N
#3325
b1000011 @#
1'
1N
#3350
b1000100 +
0'
0N
#3375
b1000100 @#
1'
1N
#3400
b1000101 +
0'
0N
#3425
b1000101 @#
1'
1N
#3450
b1000110 +
0'
0N
#3475
b1000110 @#
1'
1N
#3500
b1000111 +
0'
0N
#3525
b1000111 @#
1'
1N
#3550
b1001000 +
0'
0N
#3575
b1001000 @#
1'
1N
#3600
b1001001 +
0'
0N
#3625
b1001001 @#
1'
1N
#3650
b1001010 +
0'
0N
#3675
b1001010 @#
1'
1N
#3700
b1001011 +
0'
0N
#3725
b1001011 @#
1'
1N
#3750
b1001100 +
0'
0N
#3775
b1001100 @#
1'
1N
#3800
b1001101 +
0'
0N
#3825
b1001101 @#
1'
1N
#3850
b1001110 +
0'
0N
#3875
b1001110 @#
1'
1N
#3900
b1001111 +
0'
0N
#3925
b1001111 @#
1'
1N
#3950
b1010000 +
0'
0N
#3975
b1010000 @#
1'
1N
#4000
b1010001 +
0'
0N
#4025
b1010001 @#
1'
1N
#4050
b1010010 +
0'
0N
#4075
b1010010 @#
1'
1N
#4100
b1010011 +
0'
0N
#4125
b1010011 @#
1'
1N
#4150
b1010100 +
0'
0N
#4175
b1010100 @#
1'
1N
#4200
b1010101 +
0'
0N
#4225
b1010101 @#
1'
1N
#4250
b1010110 +
0'
0N
#4275
b1010110 @#
1'
1N
#4300
b1010111 +
0'
0N
#4325
b1010111 @#
1'
1N
#4350
b1011000 +
0'
0N
#4375
b1011000 @#
1'
1N
#4400
b1011001 +
0'
0N
#4425
b1011001 @#
1'
1N
#4450
b1011010 +
0'
0N
#4475
b1011010 @#
1'
1N
#4500
b1011011 +
0'
0N
#4525
b1011011 @#
1'
1N
#4550
b1011100 +
0'
0N
#4575
b1011100 @#
1'
1N
#4600
b1011101 +
0'
0N
#4625
b1011101 @#
1'
1N
#4650
b1011110 +
0'
0N
#4675
b1011110 @#
1'
1N
#4700
b1011111 +
0'
0N
#4725
b1011111 @#
1'
1N
#4750
b1100000 +
0'
0N
#4775
b1100000 @#
1'
1N
#4800
b1100001 +
0'
0N
#4825
b1100001 @#
1'
1N
#4850
b1100010 +
0'
0N
#4875
b1100010 @#
1'
1N
#4900
b1100011 +
0'
0N
#4925
b1100011 @#
1'
1N
#4950
b1100100 +
0'
0N
#4975
b1100100 @#
1'
1N
#5000
b1100101 +
0'
0N
#5025
b1100101 @#
1'
1N
#5050
b1100110 +
0'
0N
#5075
b1100110 @#
1'
1N
#5100
b1100111 +
0'
0N
#5125
b1100111 @#
1'
1N
#5150
b1101000 +
0'
0N
#5175
b1101000 @#
1'
1N
#5200
b1101001 +
0'
0N
#5225
b1101001 @#
1'
1N
#5250
b1101010 +
0'
0N
#5275
b1101010 @#
1'
1N
#5300
b1101011 +
0'
0N
#5325
b1101011 @#
1'
1N
#5350
b1101100 +
0'
0N
#5375
b1101100 @#
1'
1N
#5400
b1101101 +
0'
0N
#5425
b1101101 @#
1'
1N
#5450
b1101110 +
0'
0N
#5475
b1101110 @#
1'
1N
#5500
b1101111 +
0'
0N
#5525
b1101111 @#
1'
1N
#5550
b1110000 +
0'
0N
#5575
b1110000 @#
1'
1N
#5600
b1110001 +
0'
0N
#5625
b1110001 @#
1'
1N
#5650
b1110010 +
0'
0N
#5675
b1110010 @#
1'
1N
#5700
b1110011 +
0'
0N
#5725
b1110011 @#
1'
1N
#5750
b1110100 +
0'
0N
#5775
b1110100 @#
1'
1N
#5800
b1110101 +
0'
0N
#5825
b1110101 @#
1'
1N
#5850
b1110110 +
0'
0N
#5875
b1110110 @#
1'
1N
#5900
b1110111 +
0'
0N
#5925
b1110111 @#
1'
1N
#5950
b1111000 +
0'
0N
#5975
b1111000 @#
1'
1N
#6000
b1111001 +
0'
0N
#6025
b1111001 @#
1'
1N
#6050
b1111010 +
0'
0N
#6075
b1111010 @#
1'
1N
#6100
b1111011 +
0'
0N
#6125
b1111011 @#
1'
1N
#6150
b1111100 +
0'
0N
#6175
b1111100 @#
1'
1N
#6200
b1111101 +
0'
0N
#6225
b1111101 @#
1'
1N
#6250
b1111110 +
0'
0N
#6275
b1111110 @#
1'
1N
#6300
b1111111 +
0'
0N
#6325
b1111111 @#
1'
1N
#6350
b10000000 +
0'
0N
#6375
b10000000 @#
1'
1N
#6400
b10000001 +
0'
0N
#6425
b10000001 @#
1'
1N
#6450
b10000010 +
0'
0N
#6475
b10000010 @#
1'
1N
#6500
b10000011 +
0'
0N
#6525
b10000011 @#
1'
1N
#6550
b10000100 +
0'
0N
#6575
b10000100 @#
1'
1N
#6600
b10000101 +
0'
0N
#6625
b10000101 @#
1'
1N
#6650
b10000110 +
0'
0N
#6675
b10000110 @#
1'
1N
#6700
b10000111 +
0'
0N
#6725
b10000111 @#
1'
1N
#6750
b10001000 +
0'
0N
#6775
b10001000 @#
1'
1N
#6800
b10001001 +
0'
0N
#6825
b10001001 @#
1'
1N
#6850
b10001010 +
0'
0N
#6875
b10001010 @#
1'
1N
#6900
b10001011 +
0'
0N
#6925
b10001011 @#
1'
1N
#6950
b10001100 +
0'
0N
#6975
b10001100 @#
1'
1N
#7000
b10001101 +
0'
0N
#7025
b10001101 @#
1'
1N
#7050
b10001110 +
0'
0N
#7075
b10001110 @#
1'
1N
#7100
b10001111 +
0'
0N
#7125
b10001111 @#
1'
1N
#7150
b10010000 +
0'
0N
#7175
b10010000 @#
1'
1N
#7200
b10010001 +
0'
0N
#7225
b10010001 @#
1'
1N
#7250
b10010010 +
0'
0N
#7275
b10010010 @#
1'
1N
#7300
b10010011 +
0'
0N
#7325
b10010011 @#
1'
1N
#7350
b10010100 +
0'
0N
#7375
b10010100 @#
1'
1N
#7400
b10010101 +
0'
0N
#7425
b10010101 @#
1'
1N
#7450
b10010110 +
0'
0N
#7475
b10010110 @#
1'
1N
#7500
b10010111 +
b11111 *
b11111 .
b0 1
b100000 -
0'
0N
#7525
b10010111 @#
1'
1N
#7550
