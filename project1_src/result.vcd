$date
	Wed Dec  7 15:44:08 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Equal $end
$var wire 32 ! data1_i [31:0] $end
$var wire 32 " data2_i [31:0] $end
$var wire 1 # data_o $end
$upscope $end
$scope module TestBench $end
$var reg 1 $ Clk $end
$var reg 1 % Reset $end
$var reg 1 & Start $end
$var integer 32 ' counter [31:0] $end
$var integer 32 ( flush [31:0] $end
$var integer 32 ) i [31:0] $end
$var integer 32 * outfile [31:0] $end
$var integer 32 + stall [31:0] $end
$scope module CPU $end
$var wire 1 , branch_flag $end
$var wire 1 $ clk_i $end
$var wire 1 - clk_w $end
$var wire 1 . flush $end
$var wire 1 % rst_i $end
$var wire 1 & start_i $end
$var wire 32 / mux1Out [31:0] $end
$var wire 1 0 jump_flag $end
$var wire 32 1 inst_addr [31:0] $end
$var wire 32 2 inst [31:0] $end
$var wire 32 3 extended [31:0] $end
$var wire 1 4 branch_flagT $end
$var wire 5 5 WB_mux3 [4:0] $end
$var wire 2 6 WB_memState [1:0] $end
$var wire 2 7 WB_WBState [1:0] $end
$var wire 32 8 MUX_7Out [31:0] $end
$var wire 32 9 MUX_5Out [31:0] $end
$var wire 8 : MUX8_data [7:0] $end
$var wire 5 ; MEM_mux3 [4:0] $end
$var wire 32 < MEM_ALUOut [31:0] $end
$var wire 32 = JUMP_Addr [31:0] $end
$var wire 32 > ID_rt [31:0] $end
$var wire 32 ? ID_rs [31:0] $end
$var wire 32 @ ID_addr [31:0] $end
$var wire 1 A Eq_flag $end
$var wire 32 B EX_extend [31:0] $end
$var wire 5 C EX_Rt [4:0] $end
$var wire 2 D EX_M [1:0] $end
$var wire 32 E Add_pc_o [31:0] $end
$scope module ADD $end
$var wire 32 F data_o [31:0] $end
$var wire 32 G data2_in [31:0] $end
$var wire 32 H data1_in [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 32 I data1_i [31:0] $end
$var wire 32 J data2_i [31:0] $end
$var wire 32 K data_o [31:0] $end
$var wire 3 L ALUCtrl_i [2:0] $end
$var reg 32 M result_temp [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 3 N ALUCtrl_o [2:0] $end
$var wire 6 O funct_i [5:0] $end
$var wire 2 P ALUOp_i [1:0] $end
$var reg 3 Q aluCtrl_temp [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 R data2_in [31:0] $end
$var wire 32 S data_o [31:0] $end
$var wire 32 T data1_in [31:0] $end
$upscope $end
$scope module Control $end
$var wire 32 U data_in [31:0] $end
$var reg 1 4 branch $end
$var reg 8 V data_out [7:0] $end
$var reg 1 0 jump $end
$upscope $end
$scope module DataMemory $end
$var wire 32 W WriteData_i [31:0] $end
$var wire 1 X memRead_i $end
$var wire 1 Y memWrite_i $end
$var wire 32 Z ALUOut_i [31:0] $end
$var reg 32 [ ReadData_o [31:0] $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 \ ALUOut_i [31:0] $end
$var wire 2 ] WB_i [1:0] $end
$var wire 1 $ clk_i $end
$var wire 5 ^ mux3_i [4:0] $end
$var wire 32 _ mux7_i [31:0] $end
$var wire 2 ` MEM_i [1:0] $end
$var reg 32 a ALUOut_o [31:0] $end
$var reg 1 b MemRead_o $end
$var reg 1 c MemWrite_o $end
$var reg 2 d WB_o [1:0] $end
$var reg 5 e mux3_o [4:0] $end
$var reg 32 f mux7_o [31:0] $end
$upscope $end
$scope module ForwardingUnit $end
$var wire 5 g EX_MEM_RegRd_i [4:0] $end
$var wire 1 h EX_MEM_regWrite_i $end
$var wire 2 i ForwardA_o [1:0] $end
$var wire 2 j ForwardB_o [1:0] $end
$var wire 5 k ID_EX_RegRs [4:0] $end
$var wire 5 l ID_EX_RegRt [4:0] $end
$var wire 1 m MEM_WB_regWrite_i $end
$var wire 5 n MEM_WB_RegRd_i [4:0] $end
$var reg 2 o fa_temp [1:0] $end
$var reg 2 p fb_temp [1:0] $end
$upscope $end
$scope module HazardDetection $end
$var wire 2 q IDEX_MemRead_i [1:0] $end
$var wire 1 $ clk_i $end
$var wire 32 r instr_i [31:0] $end
$var wire 5 s IDEX_RegisterRt_i [4:0] $end
$var reg 1 t IFIDWrite_o $end
$var reg 1 u MUX8_o $end
$var reg 1 v PCWrite_o $end
$upscope $end
$scope module ID_EX $end
$var wire 1 $ clk_i $end
$var wire 4 w ctrl_EX_i [3:0] $end
$var wire 2 x ctrl_M_i [1:0] $end
$var wire 2 y ctrl_WB_i [1:0] $end
$var wire 5 z instr1115_i [4:0] $end
$var wire 5 { instr1620_FW_i [4:0] $end
$var wire 5 | instr1620_MUX_i [4:0] $end
$var wire 5 } instr2125_i [4:0] $end
$var wire 32 ~ sign_extend_i [31:0] $end
$var wire 32 !" RT_data_i [31:0] $end
$var wire 32 "" RS_data_i [31:0] $end
$var reg 2 #" ALUOp_o [1:0] $end
$var reg 1 $" ALUSrc_o $end
$var reg 32 %" RS_data_o [31:0] $end
$var reg 32 &" RT_data_o [31:0] $end
$var reg 1 '" RegDst_o $end
$var reg 2 (" ctrl_M_o [1:0] $end
$var reg 2 )" ctrl_WB_o [1:0] $end
$var reg 5 *" instr1115_o [4:0] $end
$var reg 5 +" instr1620_FW_o [4:0] $end
$var reg 5 ," instr1620_MUX_o [4:0] $end
$var reg 5 -" instr2125_o [4:0] $end
$var reg 32 ." sign_extend_o [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 /" IFIDWrite_i $end
$var wire 32 0" addr_i [31:0] $end
$var wire 1 $ clk_i $end
$var wire 1 . flush_i $end
$var wire 32 1" instr_i [31:0] $end
$var reg 32 2" addr_o [31:0] $end
$var reg 32 3" instr_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 4" instr_o [31:0] $end
$var wire 32 5" addr_i [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 32 6" ReadData_i [31:0] $end
$var wire 2 7" WB_i [1:0] $end
$var wire 1 $ clk_i $end
$var wire 32 8" immed_i [31:0] $end
$var wire 5 9" mux3_i [4:0] $end
$var reg 32 :" ReadData_o [31:0] $end
$var reg 2 ;" WB_o [1:0] $end
$var reg 32 <" immed_o [31:0] $end
$var reg 5 =" mux3_o [4:0] $end
$upscope $end
$scope module MUX_1 $end
$var wire 32 >" data1_i [31:0] $end
$var wire 32 ?" data2_i [31:0] $end
$var wire 1 , select_i $end
$var reg 32 @" data_o [31:0] $end
$upscope $end
$scope module MUX_2 $end
$var wire 32 A" data1_i [31:0] $end
$var wire 32 B" data2_i [31:0] $end
$var wire 1 0 select_i $end
$var reg 32 C" data_o [31:0] $end
$upscope $end
$scope module MUX_3 $end
$var wire 5 D" data1_i [4:0] $end
$var wire 5 E" data2_i [4:0] $end
$var wire 1 '" select_i $end
$var reg 5 F" data_o [4:0] $end
$upscope $end
$scope module MUX_4 $end
$var wire 32 G" data1_i [31:0] $end
$var wire 1 $" select_i $end
$var wire 32 H" data2_i [31:0] $end
$var reg 32 I" data_o [31:0] $end
$upscope $end
$scope module MUX_5 $end
$var wire 32 J" data1_i [31:0] $end
$var wire 32 K" data2_i [31:0] $end
$var wire 1 L" select_i $end
$var reg 32 M" data_o [31:0] $end
$upscope $end
$scope module MUX_6 $end
$var wire 32 N" data1_i [31:0] $end
$var wire 32 O" data2_i [31:0] $end
$var wire 32 P" data3_i [31:0] $end
$var wire 2 Q" select_i [1:0] $end
$var reg 32 R" data_o [31:0] $end
$upscope $end
$scope module MUX_7 $end
$var wire 32 S" data1_i [31:0] $end
$var wire 32 T" data2_i [31:0] $end
$var wire 32 U" data3_i [31:0] $end
$var wire 2 V" select_i [1:0] $end
$var reg 32 W" data_o [31:0] $end
$upscope $end
$scope module MUX_8 $end
$var wire 8 X" data1_i [7:0] $end
$var wire 8 Y" data2_i [7:0] $end
$var wire 1 u select_i $end
$var reg 8 Z" data_o [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 v PCWrite_i $end
$var wire 1 - clk_i $end
$var wire 32 [" pc_i [31:0] $end
$var wire 1 % rst_i $end
$var wire 1 & start_i $end
$var reg 32 \" pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 ]" RDaddr_i [4:0] $end
$var wire 32 ^" RDdata_i [31:0] $end
$var wire 5 _" RSaddr_i [4:0] $end
$var wire 32 `" RSdata_o [31:0] $end
$var wire 5 a" RTaddr_i [4:0] $end
$var wire 32 b" RTdata_o [31:0] $end
$var wire 1 c" RegWrite_i $end
$var wire 1 $ clk_i $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 d" data_i [15:0] $end
$var wire 32 e" data_o [31:0] $end
$upscope $end
$scope module shiftLeft2_26 $end
$var wire 26 f" data_i [25:0] $end
$var wire 28 g" data_o [27:0] $end
$upscope $end
$scope module shiftLeft2_32 $end
$var wire 32 h" data_i [31:0] $end
$var wire 32 i" data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx00 i"
bx h"
bx00 g"
bx f"
bx e"
bx d"
xc"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
b0 \"
b100 ["
bx Z"
b0 Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
xL"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
b100 C"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 B"
b100 A"
b100 @"
bx ?"
b100 >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
b0 5"
b100000000100000 4"
bx 3"
bx 2"
b100000000100000 1"
b100 0"
x/"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
x'"
bx &"
bx %"
x$"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
0v
0u
0t
bx s
bx r
b0x q
bx p
bx o
bx n
xm
bx l
bx k
bx j
bx i
xh
bx g
bx f
bx e
bx d
xc
xb
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
xY
xX
bx W
bx V
bx U
b0 T
b100 S
b100 R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx00 H
bx G
bx F
b100 E
bx D
bx C
bx B
xA
bx @
bx ?
bx >
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
04
bx 3
bx 2
b0 1
00
b100 /
0.
1-
0,
b0 +
b11 *
b100000 )
b0 (
b0 '
0&
0%
1$
x#
bz "
bz !
$end
#12
1&
1%
#25
0-
0$
#50
b1000 C"
b1000 ["
b100000000010010000000000001010 1"
b100000000010010000000000001010 4"
b1000 /
b1000 @"
b1000 A"
b1000 E
b1000 S
b1000 0"
b1000 >"
b100 1
b100 T
b100 5"
b100 \"
b1 '
1-
1$
#75
0-
0$
#100
b1100 C"
b1100 ["
b10101101000000000000000000000000 1"
b10101101000000000000000000000000 4"
b1100 /
b1100 @"
b1100 A"
b1100 E
b1100 S
b1100 0"
b1100 >"
b1000 1
b1000 T
b1000 5"
b1000 \"
b10 '
1-
1$
#125
0-
0$
#150
b10000 C"
b10000 ["
b10101101000010010000000000000100 1"
b10101101000010010000000000000100 4"
b10000 /
b10000 @"
b10000 A"
b10000 E
b10000 S
b10000 0"
b10000 >"
b1100 1
b1100 T
b1100 5"
b1100 \"
b11 '
1-
1$
#175
0-
0$
#200
b10100 C"
b10100 ["
b10001101000011010000000000000100 1"
b10001101000011010000000000000100 4"
b10100 /
b10100 @"
b10100 A"
b10100 E
b10100 S
b10100 0"
b10100 >"
b10000 1
b10000 T
b10000 5"
b10000 \"
b100 '
1-
1$
#225
0-
0$
#250
b11000 C"
b11000 ["
b1101010010111100000100000 1"
b1101010010111100000100000 4"
b11000 /
b11000 @"
b11000 A"
b11000 E
b11000 S
b11000 0"
b11000 >"
b10100 1
b10100 T
b10100 5"
b10100 \"
b101 '
1-
1$
#275
0-
0$
#300
b11100 C"
b11100 ["
b100000000010100000000000001101 1"
b100000000010100000000000001101 4"
b11100 /
b11100 @"
b11100 A"
b11100 E
b11100 S
b11100 0"
b11100 >"
b11000 1
b11000 T
b11000 5"
b11000 \"
b110 '
1-
1$
#325
0-
0$
#350
b100000 C"
b100000 ["
b1001010010101100000011000 1"
b1001010010101100000011000 4"
b100000 /
b100000 @"
b100000 A"
b100000 E
b100000 S
b100000 0"
b100000 >"
b11100 1
b11100 T
b11100 5"
b11100 \"
b111 '
1-
1$
#375
0-
0$
#400
b100100 C"
b100100 ["
b1000000000000000000000001011 1"
b1000000000000000000000001011 4"
b100100 /
b100100 @"
b100100 A"
b100100 E
b100100 S
b100100 0"
b100100 >"
b100000 1
b100000 T
b100000 5"
b100000 \"
b1000 '
1-
1$
#425
0-
0$
#450
b101000 C"
b101000 ["
b100001001010010000000000000001 1"
b100001001010010000000000000001 4"
b101000 /
b101000 @"
b101000 A"
b101000 E
b101000 S
b101000 0"
b101000 >"
b100100 1
b100100 T
b100100 5"
b100100 \"
b1001 '
1-
1$
#475
0-
0$
#500
b101100 C"
b101100 ["
b101100 /
b101100 @"
b101100 A"
b101100 E
b101100 S
b101100 0"
b101100 >"
b101000 1
b101000 T
b101000 5"
b101000 \"
b1010 '
1-
1$
#525
0-
0$
#550
b110000 C"
b110000 ["
b1010010010101000000100010 1"
b1010010010101000000100010 4"
b110000 /
b110000 @"
b110000 A"
b110000 E
b110000 S
b110000 0"
b110000 >"
b101100 1
b101100 T
b101100 5"
b101100 \"
b1011 '
1-
1$
#575
0-
0$
#600
b110100 C"
b110100 ["
b1001010100101100000100100 1"
b1001010100101100000100100 4"
b110100 /
b110100 @"
b110100 A"
b110100 E
b110100 S
b110100 0"
b110100 >"
b110000 1
b110000 T
b110000 5"
b110000 \"
b1100 '
1-
1$
#625
0-
0$
#650
b111000 C"
b111000 ["
b1010010110110000000100101 1"
b1010010110110000000100101 4"
b111000 /
b111000 @"
b111000 A"
b111000 E
b111000 S
b111000 0"
b111000 >"
b110100 1
b110100 T
b110100 5"
b110100 \"
b1101 '
1-
1$
#675
0-
0$
#700
b111100 C"
b111100 ["
b0 1"
b0 4"
b111100 /
b111100 @"
b111100 A"
b111100 E
b111100 S
b111100 0"
b111100 >"
b111000 1
b111000 T
b111000 5"
b111000 \"
b1110 '
1-
1$
#725
0-
0$
#750
b1000000 C"
b1000000 ["
b1000000 /
b1000000 @"
b1000000 A"
b1000000 E
b1000000 S
b1000000 0"
b1000000 >"
b111100 1
b111100 T
b111100 5"
b111100 \"
b1111 '
1-
1$
#775
0-
0$
#800
b1000100 C"
b1000100 ["
b1000100 /
b1000100 @"
b1000100 A"
b1000100 E
b1000100 S
b1000100 0"
b1000100 >"
b1000000 1
b1000000 T
b1000000 5"
b1000000 \"
b10000 '
1-
1$
#825
0-
0$
#850
b1001000 C"
b1001000 ["
b1001000 /
b1001000 @"
b1001000 A"
b1001000 E
b1001000 S
b1001000 0"
b1001000 >"
b1000100 1
b1000100 T
b1000100 5"
b1000100 \"
b10001 '
1-
1$
#875
0-
0$
#900
b1001100 C"
b1001100 ["
b1001100 /
b1001100 @"
b1001100 A"
b1001100 E
b1001100 S
b1001100 0"
b1001100 >"
b1001000 1
b1001000 T
b1001000 5"
b1001000 \"
b10010 '
1-
1$
#925
0-
0$
#950
b1010000 C"
b1010000 ["
b1010000 /
b1010000 @"
b1010000 A"
b1010000 E
b1010000 S
b1010000 0"
b1010000 >"
b1001100 1
b1001100 T
b1001100 5"
b1001100 \"
b10011 '
1-
1$
#975
0-
0$
#1000
b1010100 C"
b1010100 ["
b1010100 /
b1010100 @"
b1010100 A"
b1010100 E
b1010100 S
b1010100 0"
b1010100 >"
b1010000 1
b1010000 T
b1010000 5"
b1010000 \"
b10100 '
1-
1$
#1025
0-
0$
#1050
b1011000 C"
b1011000 ["
b1011000 /
b1011000 @"
b1011000 A"
b1011000 E
b1011000 S
b1011000 0"
b1011000 >"
b1010100 1
b1010100 T
b1010100 5"
b1010100 \"
b10101 '
1-
1$
#1075
0-
0$
#1100
b1011100 C"
b1011100 ["
b1011100 /
b1011100 @"
b1011100 A"
b1011100 E
b1011100 S
b1011100 0"
b1011100 >"
b1011000 1
b1011000 T
b1011000 5"
b1011000 \"
b10110 '
1-
1$
#1125
0-
0$
#1150
b1100000 C"
b1100000 ["
b1100000 /
b1100000 @"
b1100000 A"
b1100000 E
b1100000 S
b1100000 0"
b1100000 >"
b1011100 1
b1011100 T
b1011100 5"
b1011100 \"
b10111 '
1-
1$
#1175
0-
0$
#1200
b1100100 C"
b1100100 ["
b1100100 /
b1100100 @"
b1100100 A"
b1100100 E
b1100100 S
b1100100 0"
b1100100 >"
b1100000 1
b1100000 T
b1100000 5"
b1100000 \"
b11000 '
1-
1$
#1225
0-
0$
#1250
b1101000 C"
b1101000 ["
b1101000 /
b1101000 @"
b1101000 A"
b1101000 E
b1101000 S
b1101000 0"
b1101000 >"
b1100100 1
b1100100 T
b1100100 5"
b1100100 \"
b11001 '
1-
1$
#1275
0-
0$
#1300
b1101100 C"
b1101100 ["
b1101100 /
b1101100 @"
b1101100 A"
b1101100 E
b1101100 S
b1101100 0"
b1101100 >"
b1101000 1
b1101000 T
b1101000 5"
b1101000 \"
b11010 '
1-
1$
#1325
0-
0$
#1350
b1110000 C"
b1110000 ["
b1110000 /
b1110000 @"
b1110000 A"
b1110000 E
b1110000 S
b1110000 0"
b1110000 >"
b1101100 1
b1101100 T
b1101100 5"
b1101100 \"
b11011 '
1-
1$
#1375
0-
0$
#1400
b1110100 C"
b1110100 ["
b1110100 /
b1110100 @"
b1110100 A"
b1110100 E
b1110100 S
b1110100 0"
b1110100 >"
b1110000 1
b1110000 T
b1110000 5"
b1110000 \"
b11100 '
1-
1$
#1425
0-
0$
#1450
b1111000 C"
b1111000 ["
b1111000 /
b1111000 @"
b1111000 A"
b1111000 E
b1111000 S
b1111000 0"
b1111000 >"
b1110100 1
b1110100 T
b1110100 5"
b1110100 \"
b11101 '
1-
1$
#1475
0-
0$
#1500
b1111100 C"
b1111100 ["
b1111100 /
b1111100 @"
b1111100 A"
b1111100 E
b1111100 S
b1111100 0"
b1111100 >"
b1111000 1
b1111000 T
b1111000 5"
b1111000 \"
b11110 '
1-
1$
#1525
0-
0$
#1550
