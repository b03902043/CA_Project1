$date
	Mon Dec 12 20:05:44 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Start $end
$var integer 32 # counter [31:0] $end
$var integer 32 $ flush [31:0] $end
$var integer 32 % i [31:0] $end
$var integer 32 & outfile [31:0] $end
$var integer 32 ' stall [31:0] $end
$scope module CPU $end
$var wire 1 ( branch_flag $end
$var wire 1 ! clk_i $end
$var wire 1 ) flush $end
$var wire 1 " start_i $end
$var wire 32 * mux7Write [31:0] $end
$var wire 32 + mux6ALU [31:0] $end
$var wire 32 , mux4ALU [31:0] $end
$var wire 5 - mux3EXMEM [4:0] $end
$var wire 32 . mux1Out [31:0] $end
$var wire 1 / memWrite $end
$var wire 1 0 memRead $end
$var wire 1 1 jump_flag $end
$var wire 32 2 inst_addr [31:0] $end
$var wire 32 3 inst [31:0] $end
$var wire 32 4 extended [31:0] $end
$var wire 8 5 cm8 [7:0] $end
$var wire 1 6 branch_flagT $end
$var wire 32 7 am1 [31:0] $end
$var wire 5 8 WB_mux3 [4:0] $end
$var wire 2 9 WB_memState [1:0] $end
$var wire 2 : WB_WBState [1:0] $end
$var wire 1 ; PCWrite $end
$var wire 32 < MUX_7Out [31:0] $end
$var wire 32 = MUX_5Out [31:0] $end
$var wire 8 > MUX8_data [7:0] $end
$var wire 5 ? MEM_mux3 [4:0] $end
$var wire 32 @ MEM_ALUOut [31:0] $end
$var wire 32 A JUMP_Addr [31:0] $end
$var wire 32 B IF_inst [31:0] $end
$var wire 1 C IFIDWrite $end
$var wire 5 D IERt [4:0] $end
$var wire 5 E IERs [4:0] $end
$var wire 32 F ID_rt [31:0] $end
$var wire 32 G ID_rs [31:0] $end
$var wire 32 H ID_addr [31:0] $end
$var wire 1 I HazardMUX_8 $end
$var wire 1 J Eq_flag $end
$var wire 32 K EX_extend [31:0] $end
$var wire 2 L EX_WB [1:0] $end
$var wire 5 M EX_Rt [4:0] $end
$var wire 2 N EX_M [1:0] $end
$var wire 32 O Add_pc_o [31:0] $end
$var wire 32 P ALUresult [31:0] $end
$scope module ADD $end
$var wire 32 Q data_o [31:0] $end
$var wire 32 R data2_in [31:0] $end
$var wire 32 S data1_in [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 32 T data_o [31:0] $end
$var wire 32 U data2_i [31:0] $end
$var wire 32 V data1_i [31:0] $end
$var wire 3 W ALUCtrl_i [2:0] $end
$var reg 32 X result_temp [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 3 Y ALUCtrl_o [2:0] $end
$var wire 6 Z funct_i [5:0] $end
$var wire 2 [ ALUOp_i [1:0] $end
$var reg 3 \ aluCtrl_temp [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 ] data2_in [31:0] $end
$var wire 32 ^ data_o [31:0] $end
$var wire 32 _ data1_in [31:0] $end
$upscope $end
$scope module Control $end
$var wire 32 ` data_in [31:0] $end
$var reg 1 6 branch $end
$var reg 8 a data_out [7:0] $end
$var reg 1 1 jump $end
$upscope $end
$scope module DataMemory $end
$var wire 1 ! clk_i $end
$var wire 8 b memory_o [7:0] $end
$var wire 1 / memWrite_i $end
$var wire 1 0 memRead_i $end
$var wire 32 c WriteData_i [31:0] $end
$var wire 32 d ReadData_o [31:0] $end
$var wire 32 e ALUOut_i [31:0] $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 f ALUOut_i [31:0] $end
$var wire 1 ! clk_i $end
$var wire 32 g mux7_i [31:0] $end
$var wire 5 h mux3_i [4:0] $end
$var wire 2 i WB_i [1:0] $end
$var wire 2 j MEM_i [1:0] $end
$var reg 32 k ALUOut_o [31:0] $end
$var reg 1 0 MemRead_o $end
$var reg 1 / MemWrite_o $end
$var reg 2 l WB_o [1:0] $end
$var reg 5 m mux3_o [4:0] $end
$var reg 32 n mux7_o [31:0] $end
$upscope $end
$scope module ForwardingUnit $end
$var wire 5 o EX_MEM_RegRd_i [4:0] $end
$var wire 1 p EX_MEM_regWrite_i $end
$var wire 2 q ForwardA_o [1:0] $end
$var wire 2 r ForwardB_o [1:0] $end
$var wire 1 s MEM_WB_regWrite_i $end
$var wire 5 t MEM_WB_RegRd_i [4:0] $end
$var wire 5 u ID_EX_RegRt [4:0] $end
$var wire 5 v ID_EX_RegRs [4:0] $end
$var reg 2 w fa_temp [1:0] $end
$var reg 2 x fb_temp [1:0] $end
$upscope $end
$scope module HazardDetection $end
$var wire 1 y IDEX_MemRead_i $end
$var wire 32 z instr_i [31:0] $end
$var wire 5 { IDEX_RegisterRt_i [4:0] $end
$var reg 1 C IFIDWrite_o $end
$var reg 1 I MUX8_o $end
$var reg 1 ; PCWrite_o $end
$upscope $end
$scope module ID_EX $end
$var wire 1 ! clk_i $end
$var wire 4 | ctrl_EX_i [3:0] $end
$var wire 2 } ctrl_M_i [1:0] $end
$var wire 2 ~ ctrl_WB_i [1:0] $end
$var wire 5 !" instr1115_i [4:0] $end
$var wire 5 "" instr1620_FW_i [4:0] $end
$var wire 5 #" instr1620_MUX_i [4:0] $end
$var wire 5 $" instr2125_i [4:0] $end
$var wire 32 %" sign_extend_i [31:0] $end
$var wire 32 &" RT_data_i [31:0] $end
$var wire 32 '" RS_data_i [31:0] $end
$var reg 2 (" ALUOp_o [1:0] $end
$var reg 1 )" ALUSrc_o $end
$var reg 32 *" RS_data_o [31:0] $end
$var reg 32 +" RT_data_o [31:0] $end
$var reg 1 ," RegDst_o $end
$var reg 2 -" ctrl_M_o [1:0] $end
$var reg 2 ." ctrl_WB_o [1:0] $end
$var reg 5 /" instr1115_o [4:0] $end
$var reg 5 0" instr1620_FW_o [4:0] $end
$var reg 5 1" instr1620_MUX_o [4:0] $end
$var reg 5 2" instr2125_o [4:0] $end
$var reg 32 3" sign_extend_o [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 C IFIDWrite_i $end
$var wire 32 4" addr_i [31:0] $end
$var wire 1 ! clk_i $end
$var wire 1 ) flush_i $end
$var wire 32 5" instr_i [31:0] $end
$var reg 32 6" addr_o [31:0] $end
$var reg 32 7" instr_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 8" instr_o [31:0] $end
$var wire 32 9" addr_i [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 32 :" ReadData_i [31:0] $end
$var wire 2 ;" WB_i [1:0] $end
$var wire 1 ! clk_i $end
$var wire 32 <" immed_i [31:0] $end
$var wire 5 =" mux3_i [4:0] $end
$var reg 32 >" ReadData_o [31:0] $end
$var reg 2 ?" WB_o [1:0] $end
$var reg 32 @" immed_o [31:0] $end
$var reg 5 A" mux3_o [4:0] $end
$upscope $end
$scope module MUX_1 $end
$var wire 32 B" data1_i [31:0] $end
$var wire 32 C" data2_i [31:0] $end
$var wire 1 ( select_i $end
$var reg 32 D" data_o [31:0] $end
$upscope $end
$scope module MUX_2 $end
$var wire 32 E" data1_i [31:0] $end
$var wire 32 F" data2_i [31:0] $end
$var wire 1 1 select_i $end
$var reg 32 G" data_o [31:0] $end
$upscope $end
$scope module MUX_3 $end
$var wire 5 H" data1_i [4:0] $end
$var wire 5 I" data2_i [4:0] $end
$var wire 1 ," select_i $end
$var reg 5 J" data_o [4:0] $end
$upscope $end
$scope module MUX_4 $end
$var wire 32 K" data2_i [31:0] $end
$var wire 1 )" select_i $end
$var wire 32 L" data1_i [31:0] $end
$var reg 32 M" data_o [31:0] $end
$upscope $end
$scope module MUX_5 $end
$var wire 32 N" data1_i [31:0] $end
$var wire 32 O" data2_i [31:0] $end
$var wire 1 P" select_i $end
$var reg 32 Q" data_o [31:0] $end
$upscope $end
$scope module MUX_6 $end
$var wire 32 R" data1_i [31:0] $end
$var wire 32 S" data2_i [31:0] $end
$var wire 32 T" data3_i [31:0] $end
$var wire 2 U" select_i [1:0] $end
$var reg 32 V" data_o [31:0] $end
$upscope $end
$scope module MUX_7 $end
$var wire 32 W" data1_i [31:0] $end
$var wire 32 X" data2_i [31:0] $end
$var wire 32 Y" data3_i [31:0] $end
$var wire 2 Z" select_i [1:0] $end
$var reg 32 [" data_o [31:0] $end
$upscope $end
$scope module MUX_8 $end
$var wire 8 \" data1_i [7:0] $end
$var wire 8 ]" data2_i [7:0] $end
$var wire 1 I select_i $end
$var reg 8 ^" data_o [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ; PCWrite_i $end
$var wire 1 ! clk_i $end
$var wire 32 _" pc_i [31:0] $end
$var wire 1 " start_i $end
$var reg 32 `" pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 a" RDaddr_i [4:0] $end
$var wire 32 b" RDdata_i [31:0] $end
$var wire 5 c" RSaddr_i [4:0] $end
$var wire 32 d" RSdata_o [31:0] $end
$var wire 5 e" RTaddr_i [4:0] $end
$var wire 32 f" RTdata_o [31:0] $end
$var wire 1 g" RegWrite_i $end
$var wire 1 ! clk_i $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 h" data_i [15:0] $end
$var wire 32 i" data_o [31:0] $end
$upscope $end
$scope module shiftLeft2_26 $end
$var wire 26 j" data_i [25:0] $end
$var reg 28 k" data_o [27:0] $end
$upscope $end
$scope module shiftLeft2_32 $end
$var wire 32 l" data_i [31:0] $end
$var wire 32 m" data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx00 m"
bx l"
bx k"
bx j"
bx i"
bx h"
xg"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
b0 `"
b100 _"
bx ^"
b0 ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
xP"
b0xxxxxxxx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
b100 G"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx F"
b100 E"
b100 D"
bx C"
b100 B"
bx A"
bx @"
bx ?"
b0xxxxxxxx >"
bx ="
bx <"
bx ;"
b0xxxxxxxx :"
b0 9"
b100000000001000000000000000000 8"
bx 7"
bx 6"
b100000000001000000000000000000 5"
b100 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
x,"
bx +"
bx *"
x)"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
xy
bx x
bx w
bx v
bx u
bx t
xs
bx r
bx q
xp
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
b0xxxxxxxx d
bx c
b101 b
bx a
bx `
b0 _
b100 ^
b100 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx00 S
bx R
bx Q
bx P
b100 O
bx N
bx M
bx L
bx K
xJ
xI
bx H
bx G
bx F
bx E
bx D
xC
b100000000001000000000000000000 B
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx A
bx @
bx ?
bx >
bx =
bx <
x;
bx :
bx 9
bx 8
bx 7
x6
bx 5
bx 4
bx 3
b0 2
x1
x0
x/
b100 .
bx -
bx ,
bx +
bx *
x)
x(
b0 '
b11 &
b100000 %
b0 $
b0 #
0"
0!
$end
#12
1"
#25
1!
#50
b1 #
0!
#75
1!
#100
b10 #
0!
#125
1!
#150
b11 #
0!
#175
1!
#200
b100 #
0!
#225
1!
#250
b101 #
0!
#275
1!
#300
b110 #
0!
#325
1!
#350
b111 #
0!
#375
1!
#400
b1000 #
0!
#425
1!
#450
b1001 #
0!
#475
1!
#500
b1010 #
0!
#525
1!
#550
b1011 #
0!
#575
1!
#600
b1100 #
0!
#625
1!
#650
b1101 #
0!
#675
1!
#700
b1110 #
0!
#725
1!
#750
b1111 #
0!
#775
1!
#800
b10000 #
0!
#825
1!
#850
b10001 #
0!
#875
1!
#900
b10010 #
0!
#925
1!
#950
b10011 #
0!
#975
1!
#1000
b10100 #
0!
#1025
1!
#1050
b10101 #
0!
#1075
1!
#1100
b10110 #
0!
#1125
1!
#1150
b10111 #
0!
#1175
1!
#1200
b11000 #
0!
#1225
1!
#1250
b11001 #
0!
#1275
1!
#1300
b11010 #
0!
#1325
1!
#1350
b11011 #
0!
#1375
1!
#1400
b11100 #
0!
#1425
1!
#1450
b11101 #
0!
#1475
1!
#1500
b11110 #
0!
#1525
1!
#1550
b11111 #
0!
#1575
1!
#1600
b100000 #
0!
#1625
1!
#1650
b100001 #
0!
#1675
1!
#1700
b100010 #
0!
#1725
1!
#1750
b100011 #
0!
#1775
1!
#1800
b100100 #
0!
#1825
1!
#1850
b100101 #
0!
#1875
1!
#1900
b100110 #
0!
#1925
1!
#1950
b100111 #
0!
#1975
1!
#2000
b101000 #
0!
#2025
1!
#2050
b101001 #
0!
#2075
1!
#2100
b101010 #
0!
#2125
1!
#2150
b101011 #
0!
#2175
1!
#2200
b101100 #
0!
#2225
1!
#2250
b101101 #
0!
#2275
1!
#2300
b101110 #
0!
#2325
1!
#2350
b101111 #
0!
#2375
1!
#2400
b110000 #
0!
#2425
1!
#2450
b110001 #
0!
#2475
1!
#2500
b110010 #
0!
#2525
1!
#2550
b110011 #
0!
#2575
1!
#2600
b110100 #
0!
#2625
1!
#2650
b110101 #
0!
#2675
1!
#2700
b110110 #
0!
#2725
1!
#2750
b110111 #
0!
#2775
1!
#2800
b111000 #
0!
#2825
1!
#2850
b111001 #
0!
#2875
1!
#2900
b111010 #
0!
#2925
1!
#2950
b111011 #
0!
#2975
1!
#3000
b111100 #
0!
#3025
1!
#3050
b111101 #
0!
#3075
1!
#3100
b111110 #
0!
#3125
1!
#3150
b111111 #
0!
#3175
1!
#3200
b1000000 #
0!
#3225
1!
#3250
b1000001 #
0!
#3275
1!
#3300
b1000010 #
0!
#3325
1!
#3350
b1000011 #
0!
#3375
1!
#3400
b1000100 #
0!
#3425
1!
#3450
b1000101 #
0!
#3475
1!
#3500
b1000110 #
0!
#3525
1!
#3550
